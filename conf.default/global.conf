#-------------------------------------------------------------------------------
# bash-cloud-backup is a bash script, which can be used to automate local and cloud backup in Linux/Unix machines.
#
# COPYRIGHT......: Christos Pontikis - http://www.pontikis.gr
# LICENSE........: MIT (see https://opensource.org/licenses/MIT)
# PROJECT PAGE...: https://github.com/pontikis/bash-cloud-backup
# DOCUMENTATION..: See README.md for instructions
#                  See /conf.default for sample configuration files
#-------------------------------------------------------------------------------

# This is a sample configuration file, which defines global parameters

# COMMENTS
# Comments are permitted as independent lines. DO NOT COMMENT after param value.
# This is an invalid comment:
# param=value # invalid comment

# By default, bash-cloud-backup expects this file to be /etc/bash-cloud-backup/global.conf
# But you may define your own using
#
# bash-cloud-backup.sh -g /path/to/myglobal.conf
#
# ATTENTION: DO NOT USE [sections] in this file
# ATTENTION: DO NOT USE quotes arround strings

# bash-cloud-backup will create all directories you define in configuration files (assuming it has the required permissions)

# The following options may be exist either here (as global)
# or at a certain backup set in backup.conf
# - tar_options_backup_list
# - tar_options_backup_file
# - mysql_user
# - mysql_password
# - use_compression


# where to backup --------------------------------------------------------------
# REQUIRED
backuproot=/root/backup

# host name --------------------------------------------------------------------
# leave it blank if you do not want to display it at logs
hostname=www.example.com

# logs -------------------------------------------------------------------------
# REQUIRED ALL
# ATTENTION do not set / at the end of logfilepath
logfilepath=/root/backup/log
logfilename=backup.log
# temporary log of current session
logfilename_tmp=backup.tmp.log
log_top_separator=################################################################################
log_separator=--------------------------------------------------------------------------------

# tar options ------------------------------------------------------------------
# REQUIRED (if you backup files)
# options to tar backup list
tar_options_backup_list=cpvf
# options to tar backup file
tar_options_backup_file=cpvf

# mysql ------------------------------------------------------------------------
# REQUIRED (if you backup MySQL databases)
mysql_user=username_here
mysql_password=password_here

# compression--------------------------------------------------------------------
# REQUIRED
# available options: 7z gzip none (anything else will ignored, same as none)
use_compression=gzip

# 7z compression and AES encryption (STRONGLY RECOMMENDED) -------------------------
# if you set value other than 1, gzip compression will be used (no encryption in this case)
# leave it blank if you do not want to apply encryption
passwd_7z=YOUR_PASSWORD_HERE
# one of '7z' or 'zip'. Other types will be ignored.
#
# with filetype_7z=7z the follow command will be executed:
# $(which 7z) a -p$passwd_7z -mx=9 -mhe -t7z
# $(which 7z) a -mx=9 -mhe -t7z (no password - NOT RECOMMENDED)

# with filetype_7z=zip (NOT recommended) the follow command will be executed:
# $(which 7z) a -p$passwd_7z -mx=9 -mm=Deflate -mem=AES256 -tzip
# $(which 7z) a -mx=9 -mm=Deflate -mem=AES256 -tzip (no password - NOT RECOMMENDED)

# In systems with low RAM (< 2GB) 7z may fail with large files (> 50MB) with error: ERROR: Can't allocate required memory!
# in this case you could choose filetype_7z=zip (succeeded in mosted systems with low specs)
# When 7z succeeded you will see the message 'Everything is Ok' in log file.
#
#    7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
#    p7zip Version 9.20 (locale=C,Utf16=off,HugeFiles=on,1 CPU)
#    Scanning
#    Creating archive foo
#    Compressing  foo
#    Everything is Ok
#
filetype_7z=7z

# rotating delete --------------------------------------------------------------
# REQUIRED
# delete backups older than days_rotation
# set it to 0 if you want to disable it
# PLEASE NOTE that setting days_rotation=14 (for example) and making daily backups
# will lead to more than 14 backups (usually 15). See find +mtime documentation
days_rotation=14
# REQUIRED
# min number of backups in rotation period (recent backups)
# set it to 0 if you want to disable it
# Values greated than $days_rotation are ignored (same as 0)
min_backups_in_rotation_period=7

# Amazon S3 --------------------------------------------------------------------
# REQUIRED
# set to 1 to enable sync to Amazon S3
s3_sync=0
# S3 path to sync local backup - ATTENTION must end with /
s3_path=s3://bucket_name/mybackup/

s3cmd_sync_params=--verbose --config /root/.s3cfg --delete-removed --server-side-encryption
# ATTENTION --------------------------------------------------------------------
# s3cmd versions < 0.9 ---------------------------------------------------------
# add server side encryption using "--add-header=x-amz-server-side-encryption:AES256"
# s3cmd latest version ---------------------------------------------------------
# add server side encryption using"--server-side-encryption"

# Send mail report -------------------------------------------------------------
# leave it blank if you do not want to receive email with log file
mail_to=YOUR_EMAIL

# ##############################################################################
# END
# ##############################################################################